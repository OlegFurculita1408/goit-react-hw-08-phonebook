{"version":3,"file":"static/js/682.1fad58a2.chunk.js","mappings":"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","sources":["components/ContactForm/ContactForm.styled.js","redux/contacts/selectors.js","components/ContactForm/ContactForm.jsx","components/Contact/Contact.jsx","components/ContactList/ContactList.styled.js","components/ContactList/ContactList.jsx","components/NotificationMessage/NotificationMessage.jsx","components/Filter/Filter.styled.js","components/Filter/Filter.jsx","pages/ContactsPage.js"],"sourcesContent":["import { Form } from 'formik';\nimport styled from 'styled-components';\n\nexport const StyledForm = styled(Form)`\n  margin-bottom: 20px;\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  justify-content: center;\n\n  label {\n    display: flex;\n    margin: 0;\n    margin-bottom: 8px;\n    font-size: 26px;\n    align-items: center;\n    justify-content: center;\n  }\n  \n  input {\n    display: block;\n    font-size: 20px;\n    width: 300px;\n    height: 30px;\n    margin-bottom: 8px;\n    border: 1px solid black;\n    border-radius: 4px;\n    padding-left: 5px;\n  }\n\n`;","import { createSelector } from '@reduxjs/toolkit';\n\n\n\nexport const selectFilter = state => state.filter;\nexport const selectContacts = state => state.contacts;\n\n\nexport const selectFilteredContacts = createSelector(\n  [selectContacts, selectFilter],\n  (contacts, filter) => {\n    const filteredContacts = contacts.items\n      .filter(el => el.name.toLowerCase().includes(filter.toLowerCase()))\n      .toSorted((a, b) => a.name.localeCompare(b.name));\n    return filteredContacts;\n  }\n);\n","import { StyledForm } from './ContactForm.styled';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { addContact } from 'redux/contacts/operations';\nimport toast, { Toaster } from 'react-hot-toast';\nimport { selectContacts } from 'redux/contacts/selectors';\nimport { Formik, Field, Form } from 'formik';\nimport { Button, FormLabel } from '@chakra-ui/react';\nimport { GiSmartphone } from \"react-icons/gi\";\nimport { MdDriveFileRenameOutline } from \"react-icons/md\";\n\n\nexport const ContactForm = () => {\n  const notify = () =>\n    toast.success('Contact was successfully added to your contacts list.', {\n      duration: 3000,\n      position: 'bottom-left',\n    });\n\n  const dispatch = useDispatch();\n  const { items } = useSelector(selectContacts);\n\n  const handleAddContact = ({ name, number }, { resetForm }) => {\n    const contactExists = items.some(contact => contact.name === name);\n\n    if (contactExists) {\n      toast.error(`${name} is already in contacts`, {\n        duration: 3000,\n        position: 'bottom-left',});\n        resetForm();\n      return;\n    } else {\n      dispatch(addContact({ name, number }))\n        .unwrap()\n        .then(() => {\n          notify();\n          resetForm();\n        });\n    }\n  };\n\n    return (\n      <>\n        <Toaster />\n        <Formik\n          initialValues={{\n            name: '',\n            number: '',\n          }}\n          onSubmit={handleAddContact}\n        >\n          {props => (\n            <StyledForm as={Form}>\n              <FormLabel htmlFor=\"name\">Name <MdDriveFileRenameOutline /></FormLabel>\n              <Field\n                id=\"name\"\n                type=\"text\"\n                name=\"name\"\n                pattern=\"^[a-zA-Zа-яА-Я]+(([' \\-][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n                title=\"Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan\"\n                required\n              />\n              <FormLabel htmlFor=\"number\">Number <GiSmartphone /></FormLabel>\n              <Field\n                id=\"number\"\n                type=\"tel\"\n                name=\"number\"\n                pattern=\"\\+?\\d{1,4}?[ .\\-\\s]?\\(?\\d{1,3}?\\)?[ .\\-\\s]?\\d{1,4}[ .\\-\\s]?\\d{1,4}[ .\\-\\s]?\\d{1,9}\"\n                title=\"Phone number must be digits and can contain spaces, dashes, parentheses and can start with +\"\n                required\n              />\n              <Button colorScheme=\"teal\" size=\"md\" type=\"submit\">\n                Add contact\n              </Button>\n            </StyledForm>\n          )}\n        </Formik>\n      </>\n    );\n  \n  }\n","import { Button } from \"@chakra-ui/react\";\n\nexport const Contact = ({ contacts, handleDeleteContact }) => {\n  return contacts.map(({ id, name, number }) => {\n    return (\n      <li key={id}>\n        {name}: {number}\n        <Button\n          colorScheme=\"red\"\n          size='xs'\n          variant=\"solid\"\n          type=\"button\"\n          onClick={() => handleDeleteContact(id)}\n        >\n          Delete\n        </Button>\n      </li>\n    );\n  });\n};","import styled from 'styled-components';\n\nexport const ContactsList = styled.ul`\n  font-size: 20px;\n  display: flex;\n  flex-direction: column;\n  gap: 10px;\n  justify-content: center;\n  \n  li {\n    max-width: 700px;\n    height: auto;\n    display: flex;\n    justify-content: center;\n    gap: 10px;\n\n  }\n`;","import { useDispatch, useSelector } from 'react-redux';\nimport { deleteContact } from 'redux/contacts/operations';\nimport toast from 'react-hot-toast';\nimport { Contact } from 'components/Contact/Contact';\nimport { ContactsList } from './ContactList.styled';\nimport { selectFilteredContacts } from 'redux/contacts/selectors';\n\nexport const ContactList = () => {\n  const dispatch = useDispatch();\n  const filteredContacts = useSelector(selectFilteredContacts);\n\n  const notify = () =>\n    toast.error('Contact successfully deleted.', {\n      duration: 2000,\n      position: 'bottom-left',\n    });\n\n  const handleDeleteContact = id => {\n    dispatch(deleteContact(id))\n      .unwrap()\n      .then(() => {\n        notify();\n      });\n  };\n\n  return (\n    <ContactsList>\n      <Contact\n        contacts={filteredContacts}\n        handleDeleteContact={handleDeleteContact}\n      />\n    </ContactsList>\n  );\n};\n","export const NotificationMessage = () => {\n    return(\n        <div>\n            You don't have any contact\n        </div >\n    )\n}","import styled from 'styled-components';\n\nexport const FilterSection = styled.div`\n  label {\n    font-size: 20px;\n    display: flex;\n    margin-bottom: 12px;\n    justify-content: center;\n  }\n  input {\n    display: flex;\n    width: 280px;\n    height: 25px;\n    font-size: 16px;\n    border: 1px solid black;\n    border-radius: 4px;\n    margin: auto;\n    margin-bottom: 20px;\n    padding: 5px;\n  }\n`;\n","import { NotificationMessage } from 'components/NotificationMessage/NotificationMessage';\nimport { FilterSection } from './Filter.styled';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { selectContacts } from 'redux/contacts/selectors';\nimport { filterContacts } from 'redux/filter/filterSlice';\n\n\nexport const Filter = () => {\n  const { items: contacts } = useSelector(selectContacts);\n  const dispatch = useDispatch();\n\n  const handleFilter = e => {\n    dispatch(filterContacts(e.target.value.toLowerCase().trim()));\n  };\n\n  return contacts.length !== 0 ? (\n    <FilterSection>\n      <label htmlFor=\"filter\">Find contacts by name:</label>\n      <input id=\"filter\" type=\"text\" name=\"filter\" onChange={handleFilter} />\n    </FilterSection>\n  ) : (\n    <NotificationMessage />\n  );\n};\n","import { useDispatch } from 'react-redux';\nimport { useEffect } from 'react';\nimport { ContactForm } from 'components/ContactForm/ContactForm';\nimport { ContactList } from 'components/ContactList/ContactList';\nimport { Filter } from 'components/Filter/Filter';\nimport { fetchContacts } from 'redux/contacts/operations';\nimport { Container, Heading } from '@chakra-ui/react';\n\n\nexport default function ContactsPage() {\n  const dispatch = useDispatch();\n\n  useEffect(() => {\n    dispatch(fetchContacts());\n  }, [dispatch]);\n\n  return (\n    <Container>\n      <Heading\n        as=\"h1\"\n        fontSize=\"3xl\"\n        fontWeight=\"400\"\n        textAlign=\"center\"\n        mb=\"5\"\n      >\n        Phonebook\n      </Heading>\n      <ContactForm />\n      <Heading\n        as=\"h2\"\n        fontSize=\"3xl\"\n        fontWeight=\"400\"\n        textAlign=\"center\"\n        mb=\"5\"\n      >\n        Contacts:\n      </Heading>\n      <Filter />\n      <ContactList />\n    </Container>\n  );\n}\n"],"names":["StyledForm","styled","Form","_templateObject","_taggedTemplateLiteral","selectContacts","state","contacts","selectFilteredContacts","createSelector","filter","items","el","name","toLowerCase","includes","toSorted","a","b","localeCompare","ContactForm","dispatch","useDispatch","useSelector","_jsxs","_Fragment","children","_jsx","Toaster","Formik","initialValues","number","onSubmit","_ref","_ref2","resetForm","some","contact","toast","concat","duration","position","addContact","unwrap","then","props","as","FormLabel","htmlFor","MdDriveFileRenameOutline","Field","id","type","pattern","title","required","GiSmartphone","Button","colorScheme","size","Contact","handleDeleteContact","map","variant","onClick","ContactsList","ContactList","filteredContacts","deleteContact","NotificationMessage","FilterSection","Filter","length","onChange","e","filterContacts","target","value","trim","ContactsPage","useEffect","fetchContacts","Container","Heading","fontSize","fontWeight","textAlign","mb"],"sourceRoot":""}